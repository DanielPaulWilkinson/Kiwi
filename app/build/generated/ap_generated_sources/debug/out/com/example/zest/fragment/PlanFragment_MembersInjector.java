// Generated by Dagger (https://dagger.dev).
package com.example.zest.fragment;

import com.example.zest.async.FixedThreadPool;
import com.example.zest.room.repositories.CompleteMealRepository;
import com.example.zest.room.repositories.CompletePlanRepository;
import com.example.zest.services.ImageProcessing;
import com.example.zest.services.SharedPreferences;
import dagger.MembersInjector;
import dagger.internal.InjectedFieldSignature;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class PlanFragment_MembersInjector implements MembersInjector<PlanFragment> {
  private final Provider<CompletePlanRepository> completePlanRepositoryProvider;

  private final Provider<CompleteMealRepository> completeMealRepositoryProvider;

  private final Provider<SharedPreferences> sharedPreferencesProvider;

  private final Provider<ImageProcessing> imageProcessingProvider;

  private final Provider<FixedThreadPool> fixedThreadPoolProvider;

  public PlanFragment_MembersInjector(
      Provider<CompletePlanRepository> completePlanRepositoryProvider,
      Provider<CompleteMealRepository> completeMealRepositoryProvider,
      Provider<SharedPreferences> sharedPreferencesProvider,
      Provider<ImageProcessing> imageProcessingProvider,
      Provider<FixedThreadPool> fixedThreadPoolProvider) {
    this.completePlanRepositoryProvider = completePlanRepositoryProvider;
    this.completeMealRepositoryProvider = completeMealRepositoryProvider;
    this.sharedPreferencesProvider = sharedPreferencesProvider;
    this.imageProcessingProvider = imageProcessingProvider;
    this.fixedThreadPoolProvider = fixedThreadPoolProvider;
  }

  public static MembersInjector<PlanFragment> create(
      Provider<CompletePlanRepository> completePlanRepositoryProvider,
      Provider<CompleteMealRepository> completeMealRepositoryProvider,
      Provider<SharedPreferences> sharedPreferencesProvider,
      Provider<ImageProcessing> imageProcessingProvider,
      Provider<FixedThreadPool> fixedThreadPoolProvider) {
    return new PlanFragment_MembersInjector(completePlanRepositoryProvider, completeMealRepositoryProvider, sharedPreferencesProvider, imageProcessingProvider, fixedThreadPoolProvider);
  }

  @Override
  public void injectMembers(PlanFragment instance) {
    injectCompletePlanRepository(instance, completePlanRepositoryProvider.get());
    injectCompleteMealRepository(instance, completeMealRepositoryProvider.get());
    injectSharedPreferences(instance, sharedPreferencesProvider.get());
    injectImageProcessing(instance, imageProcessingProvider.get());
    injectFixedThreadPool(instance, fixedThreadPoolProvider.get());
  }

  @InjectedFieldSignature("com.example.zest.fragment.PlanFragment.completePlanRepository")
  public static void injectCompletePlanRepository(PlanFragment instance,
      CompletePlanRepository completePlanRepository) {
    instance.completePlanRepository = completePlanRepository;
  }

  @InjectedFieldSignature("com.example.zest.fragment.PlanFragment.completeMealRepository")
  public static void injectCompleteMealRepository(PlanFragment instance,
      CompleteMealRepository completeMealRepository) {
    instance.completeMealRepository = completeMealRepository;
  }

  @InjectedFieldSignature("com.example.zest.fragment.PlanFragment.sharedPreferences")
  public static void injectSharedPreferences(PlanFragment instance,
      SharedPreferences sharedPreferences) {
    instance.sharedPreferences = sharedPreferences;
  }

  @InjectedFieldSignature("com.example.zest.fragment.PlanFragment.imageProcessing")
  public static void injectImageProcessing(PlanFragment instance, ImageProcessing imageProcessing) {
    instance.imageProcessing = imageProcessing;
  }

  @InjectedFieldSignature("com.example.zest.fragment.PlanFragment.fixedThreadPool")
  public static void injectFixedThreadPool(PlanFragment instance, FixedThreadPool fixedThreadPool) {
    instance.fixedThreadPool = fixedThreadPool;
  }
}
