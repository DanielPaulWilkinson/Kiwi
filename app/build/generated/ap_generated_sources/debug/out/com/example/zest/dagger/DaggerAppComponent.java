// Generated by Dagger (https://dagger.dev).
package com.example.zest.dagger;

import android.app.Application;
import com.example.zest.activities.AddIngredientActivity;
import com.example.zest.activities.AddIngredientActivity_MembersInjector;
import com.example.zest.activities.AddMealActivity;
import com.example.zest.activities.AddMealActivity_MembersInjector;
import com.example.zest.activities.AddPlanActivity;
import com.example.zest.activities.AddPlanActivity_MembersInjector;
import com.example.zest.activities.MainActivity;
import com.example.zest.activities.MainActivity_MembersInjector;
import com.example.zest.activities.MealDetail;
import com.example.zest.activities.MealDetail_MembersInjector;
import com.example.zest.activities.OnBoardingActivity;
import com.example.zest.activities.OnBoardingActivity_MembersInjector;
import com.example.zest.activities.SearchIngredientActivity;
import com.example.zest.activities.SearchIngredientActivity_MembersInjector;
import com.example.zest.activities.ServingSizeActivity;
import com.example.zest.activities.ServingSizeActivity_MembersInjector;
import com.example.zest.activities.ShoppingListActivity;
import com.example.zest.activities.ShoppingListActivity_MembersInjector;
import com.example.zest.activities.StartActivity;
import com.example.zest.activities.StartActivity_MembersInjector;
import com.example.zest.async.FixedThreadPool;
import com.example.zest.fragment.GenerateMealPlanFragment;
import com.example.zest.fragment.GenerateMealPlanFragment_MembersInjector;
import com.example.zest.fragment.MealFragment;
import com.example.zest.fragment.MealFragment_MembersInjector;
import com.example.zest.fragment.PlanFragment;
import com.example.zest.fragment.PlanFragment_MembersInjector;
import com.example.zest.fragment.createPlan.MealPickerFragment;
import com.example.zest.fragment.createPlan.MealPickerFragment_MembersInjector;
import com.example.zest.fragment.createPlan.PlanDateFragment;
import com.example.zest.fragment.createPlan.PlanDateFragment_MembersInjector;
import com.example.zest.fragment.createPlan.PlanNameFragment;
import com.example.zest.fragment.createPlan.PlanNameFragment_MembersInjector;
import com.example.zest.fragment.createPlan.PlanTypeFragment;
import com.example.zest.room.general.RoomDB;
import com.example.zest.room.interfaces.CompleteMealDao;
import com.example.zest.room.interfaces.CompletePlanDao;
import com.example.zest.room.interfaces.IngredientsDao;
import com.example.zest.room.interfaces.MealIngredientsJoinDao;
import com.example.zest.room.repositories.CompleteMealRepository;
import com.example.zest.room.repositories.CompletePlanRepository;
import com.example.zest.room.repositories.IngredientRepository;
import com.example.zest.room.repositories.MealIngredientJoinRepository;
import com.example.zest.services.ImageProcessing;
import com.example.zest.services.SharedPreferences;
import dagger.internal.DoubleCheck;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerAppComponent implements AppComponent {
  private Provider<FixedThreadPool> providesExecutorServiceProvider;

  private Provider<RoomDB> providesRoomDatabaseProvider;

  private Provider<IngredientsDao> providesIngredientDaoProvider;

  private Provider<IngredientRepository> ingredientRepositoryProvider;

  private Provider<CompleteMealDao> providesCompleteMealDaoProvider;

  private Provider<CompleteMealRepository> completeMealRepositoryProvider;

  private Provider<SharedPreferences> providesSharedPreferenceServiceProvider;

  private Provider<ImageProcessing> providesImageServiceProvider;

  private Provider<CompletePlanDao> providesCompletePlanDaoProvider;

  private Provider<CompletePlanRepository> CompletePlanRepositoryProvider;

  private Provider<MealIngredientsJoinDao> providesCompleteMealIngredientDaoProvider;

  private Provider<MealIngredientJoinRepository> MealIngredientJoinRepositoryProvider;

  private Provider<Application> providesApplicationProvider;

  private DaggerAppComponent(AppModule appModuleParam, RoomModule roomModuleParam,
      FixedThreadModule fixedThreadModuleParam,
      SharedPreferencesModule sharedPreferencesModuleParam, ImageModule imageModuleParam) {

    initialize(appModuleParam, roomModuleParam, fixedThreadModuleParam, sharedPreferencesModuleParam, imageModuleParam);
  }

  public static Builder builder() {
    return new Builder();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final AppModule appModuleParam, final RoomModule roomModuleParam,
      final FixedThreadModule fixedThreadModuleParam,
      final SharedPreferencesModule sharedPreferencesModuleParam,
      final ImageModule imageModuleParam) {
    this.providesExecutorServiceProvider = DoubleCheck.provider(FixedThreadModule_ProvidesExecutorServiceFactory.create(fixedThreadModuleParam));
    this.providesRoomDatabaseProvider = DoubleCheck.provider(RoomModule_ProvidesRoomDatabaseFactory.create(roomModuleParam));
    this.providesIngredientDaoProvider = DoubleCheck.provider(RoomModule_ProvidesIngredientDaoFactory.create(roomModuleParam, providesRoomDatabaseProvider));
    this.ingredientRepositoryProvider = DoubleCheck.provider(RoomModule_IngredientRepositoryFactory.create(roomModuleParam, providesIngredientDaoProvider));
    this.providesCompleteMealDaoProvider = DoubleCheck.provider(RoomModule_ProvidesCompleteMealDaoFactory.create(roomModuleParam, providesRoomDatabaseProvider));
    this.completeMealRepositoryProvider = DoubleCheck.provider(RoomModule_CompleteMealRepositoryFactory.create(roomModuleParam, providesCompleteMealDaoProvider));
    this.providesSharedPreferenceServiceProvider = DoubleCheck.provider(SharedPreferencesModule_ProvidesSharedPreferenceServiceFactory.create(sharedPreferencesModuleParam));
    this.providesImageServiceProvider = DoubleCheck.provider(ImageModule_ProvidesImageServiceFactory.create(imageModuleParam));
    this.providesCompletePlanDaoProvider = DoubleCheck.provider(RoomModule_ProvidesCompletePlanDaoFactory.create(roomModuleParam, providesRoomDatabaseProvider));
    this.CompletePlanRepositoryProvider = DoubleCheck.provider(RoomModule_CompletePlanRepositoryFactory.create(roomModuleParam, providesCompletePlanDaoProvider));
    this.providesCompleteMealIngredientDaoProvider = DoubleCheck.provider(RoomModule_ProvidesCompleteMealIngredientDaoFactory.create(roomModuleParam, providesRoomDatabaseProvider));
    this.MealIngredientJoinRepositoryProvider = DoubleCheck.provider(RoomModule_MealIngredientJoinRepositoryFactory.create(roomModuleParam, providesCompleteMealIngredientDaoProvider));
    this.providesApplicationProvider = DoubleCheck.provider(AppModule_ProvidesApplicationFactory.create(appModuleParam));
  }

  @Override
  public void inject(MainActivity mainActivity) {
    injectMainActivity(mainActivity);
  }

  @Override
  public void inject(SearchIngredientActivity searchIngredientActivity) {
    injectSearchIngredientActivity(searchIngredientActivity);
  }

  @Override
  public void inject(AddMealActivity addMealActivity) {
    injectAddMealActivity(addMealActivity);
  }

  @Override
  public void inject(AddPlanActivity addPlanActivity) {
    injectAddPlanActivity(addPlanActivity);
  }

  @Override
  public void inject(MealDetail MealDetail) {
    injectMealDetail(MealDetail);
  }

  @Override
  public void inject(MealFragment mealFragment) {
    injectMealFragment(mealFragment);
  }

  @Override
  public void inject(PlanFragment planFragment) {
    injectPlanFragment(planFragment);
  }

  @Override
  public void inject(GenerateMealPlanFragment generateMealPlanFragment) {
    injectGenerateMealPlanFragment(generateMealPlanFragment);
  }

  @Override
  public void inject(AddIngredientActivity addIngredientActivity) {
    injectAddIngredientActivity(addIngredientActivity);
  }

  @Override
  public void inject(ShoppingListActivity shoppingListActivity) {
    injectShoppingListActivity(shoppingListActivity);
  }

  @Override
  public void inject(ServingSizeActivity servingSizeActivity) {
    injectServingSizeActivity(servingSizeActivity);
  }

  @Override
  public void inject(OnBoardingActivity onBoardingActivity) {
    injectOnBoardingActivity(onBoardingActivity);
  }

  @Override
  public void inject(StartActivity startActivity) {
    injectStartActivity(startActivity);
  }

  @Override
  public void inject(PlanNameFragment planNameFragment) {
    injectPlanNameFragment(planNameFragment);
  }

  @Override
  public void inject(PlanDateFragment planDateFragment) {
    injectPlanDateFragment(planDateFragment);
  }

  @Override
  public void inject(PlanTypeFragment planTypeFragment) {
  }

  @Override
  public void inject(MealPickerFragment mealPickerFragment) {
    injectMealPickerFragment(mealPickerFragment);
  }

  @Override
  public IngredientsDao ingredientsDao() {
    return providesIngredientDaoProvider.get();
  }

  @Override
  public CompleteMealDao completeMealDao() {
    return providesCompleteMealDaoProvider.get();
  }

  @Override
  public CompletePlanDao completePlanDao() {
    return providesCompletePlanDaoProvider.get();
  }

  @Override
  public MealIngredientsJoinDao mealIngredientsJoinDao() {
    return providesCompleteMealIngredientDaoProvider.get();
  }

  @Override
  public RoomDB roomDB() {
    return providesRoomDatabaseProvider.get();
  }

  @Override
  public IngredientRepository ingredientDataSource() {
    return ingredientRepositoryProvider.get();
  }

  @Override
  public CompleteMealRepository completeMealRepository() {
    return completeMealRepositoryProvider.get();
  }

  @Override
  public CompletePlanRepository completePlanRepository() {
    return CompletePlanRepositoryProvider.get();
  }

  @Override
  public MealIngredientJoinRepository mealIngredientJoinRepository() {
    return MealIngredientJoinRepositoryProvider.get();
  }

  @Override
  public FixedThreadPool fixedThreadPool() {
    return providesExecutorServiceProvider.get();
  }

  @Override
  public SharedPreferences sharedPreferences() {
    return providesSharedPreferenceServiceProvider.get();
  }

  @Override
  public ImageProcessing imageProcessing() {
    return providesImageServiceProvider.get();
  }

  @Override
  public Application application() {
    return providesApplicationProvider.get();
  }

  private MainActivity injectMainActivity(MainActivity instance) {
    MainActivity_MembersInjector.injectFixedThreadPool(instance, providesExecutorServiceProvider.get());
    return instance;
  }

  private SearchIngredientActivity injectSearchIngredientActivity(
      SearchIngredientActivity instance) {
    SearchIngredientActivity_MembersInjector.injectIngredientRepository(instance, ingredientRepositoryProvider.get());
    return instance;
  }

  private AddMealActivity injectAddMealActivity(AddMealActivity instance) {
    AddMealActivity_MembersInjector.injectCompleteMealRepository(instance, completeMealRepositoryProvider.get());
    AddMealActivity_MembersInjector.injectIngredientRepository(instance, ingredientRepositoryProvider.get());
    AddMealActivity_MembersInjector.injectFixedThreadPool(instance, providesExecutorServiceProvider.get());
    AddMealActivity_MembersInjector.injectSharedPreferences(instance, providesSharedPreferenceServiceProvider.get());
    AddMealActivity_MembersInjector.injectImageProcessing(instance, providesImageServiceProvider.get());
    return instance;
  }

  private AddPlanActivity injectAddPlanActivity(AddPlanActivity instance) {
    AddPlanActivity_MembersInjector.injectCompleteMealRepository(instance, completeMealRepositoryProvider.get());
    AddPlanActivity_MembersInjector.injectCompletePlanRepository(instance, CompletePlanRepositoryProvider.get());
    AddPlanActivity_MembersInjector.injectFixedThreadPool(instance, providesExecutorServiceProvider.get());
    AddPlanActivity_MembersInjector.injectImageProcessing(instance, providesImageServiceProvider.get());
    return instance;
  }

  private MealDetail injectMealDetail(MealDetail instance) {
    MealDetail_MembersInjector.injectCompleteMealRepository(instance, completeMealRepositoryProvider.get());
    MealDetail_MembersInjector.injectImageProcessing(instance, providesImageServiceProvider.get());
    MealDetail_MembersInjector.injectFixedThreadPool(instance, providesExecutorServiceProvider.get());
    return instance;
  }

  private MealFragment injectMealFragment(MealFragment instance) {
    MealFragment_MembersInjector.injectCompleteMealRepository(instance, completeMealRepositoryProvider.get());
    MealFragment_MembersInjector.injectFixedThreadPool(instance, providesExecutorServiceProvider.get());
    MealFragment_MembersInjector.injectSharedPreferences(instance, providesSharedPreferenceServiceProvider.get());
    MealFragment_MembersInjector.injectImageProcessing(instance, providesImageServiceProvider.get());
    return instance;
  }

  private PlanFragment injectPlanFragment(PlanFragment instance) {
    PlanFragment_MembersInjector.injectCompletePlanRepository(instance, CompletePlanRepositoryProvider.get());
    PlanFragment_MembersInjector.injectCompleteMealRepository(instance, completeMealRepositoryProvider.get());
    PlanFragment_MembersInjector.injectSharedPreferences(instance, providesSharedPreferenceServiceProvider.get());
    PlanFragment_MembersInjector.injectImageProcessing(instance, providesImageServiceProvider.get());
    PlanFragment_MembersInjector.injectFixedThreadPool(instance, providesExecutorServiceProvider.get());
    return instance;
  }

  private GenerateMealPlanFragment injectGenerateMealPlanFragment(
      GenerateMealPlanFragment instance) {
    GenerateMealPlanFragment_MembersInjector.injectCompleteMealRepository(instance, completeMealRepositoryProvider.get());
    GenerateMealPlanFragment_MembersInjector.injectCompletePlanRepository(instance, CompletePlanRepositoryProvider.get());
    GenerateMealPlanFragment_MembersInjector.injectFixedThreadPool(instance, providesExecutorServiceProvider.get());
    GenerateMealPlanFragment_MembersInjector.injectImageProcessing(instance, providesImageServiceProvider.get());
    return instance;
  }

  private AddIngredientActivity injectAddIngredientActivity(AddIngredientActivity instance) {
    AddIngredientActivity_MembersInjector.injectIngredientRepository(instance, ingredientRepositoryProvider.get());
    AddIngredientActivity_MembersInjector.injectFixedThreadPool(instance, providesExecutorServiceProvider.get());
    return instance;
  }

  private ShoppingListActivity injectShoppingListActivity(ShoppingListActivity instance) {
    ShoppingListActivity_MembersInjector.injectCompleteMealRepository(instance, completeMealRepositoryProvider.get());
    ShoppingListActivity_MembersInjector.injectMealIngredientJoinRepository(instance, MealIngredientJoinRepositoryProvider.get());
    ShoppingListActivity_MembersInjector.injectCompletePlanRepository(instance, CompletePlanRepositoryProvider.get());
    ShoppingListActivity_MembersInjector.injectFixedThreadPool(instance, providesExecutorServiceProvider.get());
    return instance;
  }

  private ServingSizeActivity injectServingSizeActivity(ServingSizeActivity instance) {
    ServingSizeActivity_MembersInjector.injectIngredientRepository(instance, ingredientRepositoryProvider.get());
    ServingSizeActivity_MembersInjector.injectFixedThreadPool(instance, providesExecutorServiceProvider.get());
    ServingSizeActivity_MembersInjector.injectSharedPreferences(instance, providesSharedPreferenceServiceProvider.get());
    return instance;
  }

  private OnBoardingActivity injectOnBoardingActivity(OnBoardingActivity instance) {
    OnBoardingActivity_MembersInjector.injectSharedPreferences(instance, providesSharedPreferenceServiceProvider.get());
    OnBoardingActivity_MembersInjector.injectFixedThreadPool(instance, providesExecutorServiceProvider.get());
    return instance;
  }

  private StartActivity injectStartActivity(StartActivity instance) {
    StartActivity_MembersInjector.injectSharedPreferences(instance, providesSharedPreferenceServiceProvider.get());
    StartActivity_MembersInjector.injectFixedThreadPool(instance, providesExecutorServiceProvider.get());
    return instance;
  }

  private PlanNameFragment injectPlanNameFragment(PlanNameFragment instance) {
    PlanNameFragment_MembersInjector.injectSharedPreferences(instance, providesSharedPreferenceServiceProvider.get());
    PlanNameFragment_MembersInjector.injectFixedThreadPool(instance, providesExecutorServiceProvider.get());
    return instance;
  }

  private PlanDateFragment injectPlanDateFragment(PlanDateFragment instance) {
    PlanDateFragment_MembersInjector.injectSharedPreferences(instance, providesSharedPreferenceServiceProvider.get());
    PlanDateFragment_MembersInjector.injectFixedThreadPool(instance, providesExecutorServiceProvider.get());
    return instance;
  }

  private MealPickerFragment injectMealPickerFragment(MealPickerFragment instance) {
    MealPickerFragment_MembersInjector.injectSharedPreferences(instance, providesSharedPreferenceServiceProvider.get());
    MealPickerFragment_MembersInjector.injectFixedThreadPool(instance, providesExecutorServiceProvider.get());
    MealPickerFragment_MembersInjector.injectCompleteMealRepository(instance, completeMealRepositoryProvider.get());
    return instance;
  }

  public static final class Builder {
    private AppModule appModule;

    private RoomModule roomModule;

    private FixedThreadModule fixedThreadModule;

    private SharedPreferencesModule sharedPreferencesModule;

    private ImageModule imageModule;

    private Builder() {
    }

    public Builder appModule(AppModule appModule) {
      this.appModule = Preconditions.checkNotNull(appModule);
      return this;
    }

    public Builder roomModule(RoomModule roomModule) {
      this.roomModule = Preconditions.checkNotNull(roomModule);
      return this;
    }

    public Builder fixedThreadModule(FixedThreadModule fixedThreadModule) {
      this.fixedThreadModule = Preconditions.checkNotNull(fixedThreadModule);
      return this;
    }

    public Builder sharedPreferencesModule(SharedPreferencesModule sharedPreferencesModule) {
      this.sharedPreferencesModule = Preconditions.checkNotNull(sharedPreferencesModule);
      return this;
    }

    public Builder imageModule(ImageModule imageModule) {
      this.imageModule = Preconditions.checkNotNull(imageModule);
      return this;
    }

    public AppComponent build() {
      Preconditions.checkBuilderRequirement(appModule, AppModule.class);
      Preconditions.checkBuilderRequirement(roomModule, RoomModule.class);
      if (fixedThreadModule == null) {
        this.fixedThreadModule = new FixedThreadModule();
      }
      Preconditions.checkBuilderRequirement(sharedPreferencesModule, SharedPreferencesModule.class);
      Preconditions.checkBuilderRequirement(imageModule, ImageModule.class);
      return new DaggerAppComponent(appModule, roomModule, fixedThreadModule, sharedPreferencesModule, imageModule);
    }
  }
}
