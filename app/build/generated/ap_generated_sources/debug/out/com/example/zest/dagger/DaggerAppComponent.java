// Generated by Dagger (https://dagger.dev).
package com.example.zest.dagger;

import android.app.Application;
import com.example.zest.activities.AddIngredientJourney;
import com.example.zest.activities.AddMealJourney;
import com.example.zest.activities.AddMealJourney_MembersInjector;
import com.example.zest.activities.AddPlanJourney;
import com.example.zest.activities.MainActivity;
import com.example.zest.activities.MainActivity_MembersInjector;
import com.example.zest.activities.MealDetail;
import com.example.zest.activities.MealDetail_MembersInjector;
import com.example.zest.activities.OnBoardingActivity;
import com.example.zest.activities.OnBoardingActivity_MembersInjector;
import com.example.zest.activities.PlanDetail;
import com.example.zest.activities.PlanDetail_MembersInjector;
import com.example.zest.activities.SearchIngredientActivity;
import com.example.zest.activities.SearchIngredientActivity_MembersInjector;
import com.example.zest.activities.ServingSizeActivity;
import com.example.zest.activities.ServingSizeActivity_MembersInjector;
import com.example.zest.activities.StartActivity;
import com.example.zest.activities.StartActivity_MembersInjector;
import com.example.zest.async.FixedThreadPool;
import com.example.zest.fragment.MealFragment;
import com.example.zest.fragment.MealFragment_MembersInjector;
import com.example.zest.fragment.PlanFragment;
import com.example.zest.fragment.PlanFragment_MembersInjector;
import com.example.zest.fragment.createIngredientJourney.amountOfIngredientFragment;
import com.example.zest.fragment.createIngredientJourney.amountOfIngredientFragment_MembersInjector;
import com.example.zest.fragment.createIngredientJourney.brandOfIngredientFragment;
import com.example.zest.fragment.createIngredientJourney.brandOfIngredientFragment_MembersInjector;
import com.example.zest.fragment.createIngredientJourney.caloriesOfIngredientFragment;
import com.example.zest.fragment.createIngredientJourney.caloriesOfIngredientFragment_MembersInjector;
import com.example.zest.fragment.createIngredientJourney.chipsOfIngredientFragment;
import com.example.zest.fragment.createIngredientJourney.chipsOfIngredientFragment_MembersInjector;
import com.example.zest.fragment.createIngredientJourney.descriptionOfIngredientFragment;
import com.example.zest.fragment.createIngredientJourney.descriptionOfIngredientFragment_MembersInjector;
import com.example.zest.fragment.createIngredientJourney.energyOfIngredientFragment;
import com.example.zest.fragment.createIngredientJourney.energyOfIngredientFragment_MembersInjector;
import com.example.zest.fragment.createIngredientJourney.fatOfIngredientFragment;
import com.example.zest.fragment.createIngredientJourney.fatOfIngredientFragment_MembersInjector;
import com.example.zest.fragment.createIngredientJourney.fiberOfIngredientFragment;
import com.example.zest.fragment.createIngredientJourney.fiberOfIngredientFragment_MembersInjector;
import com.example.zest.fragment.createIngredientJourney.nameOfIngredientFragment;
import com.example.zest.fragment.createIngredientJourney.nameOfIngredientFragment_MembersInjector;
import com.example.zest.fragment.createIngredientJourney.overviewOfIngredientFragment;
import com.example.zest.fragment.createIngredientJourney.overviewOfIngredientFragment_MembersInjector;
import com.example.zest.fragment.createIngredientJourney.proteinOfIngredientFragment;
import com.example.zest.fragment.createIngredientJourney.proteinOfIngredientFragment_MembersInjector;
import com.example.zest.fragment.createIngredientJourney.saturatesOfIngredientFragment;
import com.example.zest.fragment.createIngredientJourney.saturatesOfIngredientFragment_MembersInjector;
import com.example.zest.fragment.createIngredientJourney.sugarOfIngredientFragment;
import com.example.zest.fragment.createIngredientJourney.sugarOfIngredientFragment_MembersInjector;
import com.example.zest.fragment.createMealJourney.mealDescriptionFragment;
import com.example.zest.fragment.createMealJourney.mealDescriptionFragment_MembersInjector;
import com.example.zest.fragment.createMealJourney.mealImageFragment;
import com.example.zest.fragment.createMealJourney.mealImageFragment_MembersInjector;
import com.example.zest.fragment.createMealJourney.mealIngredientFragment;
import com.example.zest.fragment.createMealJourney.mealIngredientFragment_MembersInjector;
import com.example.zest.fragment.createMealJourney.mealMethodFragment;
import com.example.zest.fragment.createMealJourney.mealMethodFragment_MembersInjector;
import com.example.zest.fragment.createMealJourney.mealNameFragment;
import com.example.zest.fragment.createMealJourney.mealNameFragment_MembersInjector;
import com.example.zest.fragment.createMealJourney.mealOverviewFragment;
import com.example.zest.fragment.createMealJourney.mealOverviewFragment_MembersInjector;
import com.example.zest.fragment.createMealJourney.mealTimeFragment;
import com.example.zest.fragment.createMealJourney.mealTimeFragment_MembersInjector;
import com.example.zest.fragment.createPlanJourney.dateOfPlanFragment;
import com.example.zest.fragment.createPlanJourney.dateOfPlanFragment_MembersInjector;
import com.example.zest.fragment.createPlanJourney.generateBreakfastFromPreferenceFragment;
import com.example.zest.fragment.createPlanJourney.generateBreakfastFromPreferenceFragment_MembersInjector;
import com.example.zest.fragment.createPlanJourney.generateDinnerFromPreferenceFragment;
import com.example.zest.fragment.createPlanJourney.generateDinnerFromPreferenceFragment_MembersInjector;
import com.example.zest.fragment.createPlanJourney.generateLunchFromPreferenceFragment;
import com.example.zest.fragment.createPlanJourney.generateLunchFromPreferenceFragment_MembersInjector;
import com.example.zest.fragment.createPlanJourney.mealOfPlanFragment;
import com.example.zest.fragment.createPlanJourney.mealOfPlanFragment_MembersInjector;
import com.example.zest.fragment.createPlanJourney.nameOfPlanFragment;
import com.example.zest.fragment.createPlanJourney.nameOfPlanFragment_MembersInjector;
import com.example.zest.fragment.createPlanJourney.reviewOfPlanFragment;
import com.example.zest.fragment.createPlanJourney.reviewOfPlanFragment_MembersInjector;
import com.example.zest.fragment.createPlanJourney.typeOfPlanFragment;
import com.example.zest.fragment.createPlanJourney.typeOfPlanFragment_MembersInjector;
import com.example.zest.room.general.RoomDB;
import com.example.zest.room.interfaces.CompleteMealDao;
import com.example.zest.room.interfaces.CompletePlanDao;
import com.example.zest.room.interfaces.IngredientsDao;
import com.example.zest.room.interfaces.MealIngredientsJoinDao;
import com.example.zest.room.repositories.CompleteMealRepository;
import com.example.zest.room.repositories.CompletePlanRepository;
import com.example.zest.room.repositories.IngredientRepository;
import com.example.zest.room.repositories.MealIngredientJoinRepository;
import com.example.zest.services.ImageProcessing;
import com.example.zest.services.SharedPreferences;
import dagger.internal.DoubleCheck;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerAppComponent implements AppComponent {
  private Provider<FixedThreadPool> providesExecutorServiceProvider;

  private Provider<RoomDB> providesRoomDatabaseProvider;

  private Provider<IngredientsDao> providesIngredientDaoProvider;

  private Provider<IngredientRepository> ingredientRepositoryProvider;

  private Provider<SharedPreferences> providesSharedPreferenceServiceProvider;

  private Provider<CompleteMealDao> providesCompleteMealDaoProvider;

  private Provider<CompleteMealRepository> completeMealRepositoryProvider;

  private Provider<ImageProcessing> providesImageServiceProvider;

  private Provider<CompletePlanDao> providesCompletePlanDaoProvider;

  private Provider<CompletePlanRepository> CompletePlanRepositoryProvider;

  private Provider<MealIngredientsJoinDao> providesCompleteMealIngredientDaoProvider;

  private Provider<MealIngredientJoinRepository> MealIngredientJoinRepositoryProvider;

  private Provider<Application> providesApplicationProvider;

  private DaggerAppComponent(AppModule appModuleParam, RoomModule roomModuleParam,
      FixedThreadModule fixedThreadModuleParam,
      SharedPreferencesModule sharedPreferencesModuleParam, ImageModule imageModuleParam) {

    initialize(appModuleParam, roomModuleParam, fixedThreadModuleParam, sharedPreferencesModuleParam, imageModuleParam);
  }

  public static Builder builder() {
    return new Builder();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final AppModule appModuleParam, final RoomModule roomModuleParam,
      final FixedThreadModule fixedThreadModuleParam,
      final SharedPreferencesModule sharedPreferencesModuleParam,
      final ImageModule imageModuleParam) {
    this.providesExecutorServiceProvider = DoubleCheck.provider(FixedThreadModule_ProvidesExecutorServiceFactory.create(fixedThreadModuleParam));
    this.providesRoomDatabaseProvider = DoubleCheck.provider(RoomModule_ProvidesRoomDatabaseFactory.create(roomModuleParam));
    this.providesIngredientDaoProvider = DoubleCheck.provider(RoomModule_ProvidesIngredientDaoFactory.create(roomModuleParam, providesRoomDatabaseProvider));
    this.ingredientRepositoryProvider = DoubleCheck.provider(RoomModule_IngredientRepositoryFactory.create(roomModuleParam, providesIngredientDaoProvider));
    this.providesSharedPreferenceServiceProvider = DoubleCheck.provider(SharedPreferencesModule_ProvidesSharedPreferenceServiceFactory.create(sharedPreferencesModuleParam));
    this.providesCompleteMealDaoProvider = DoubleCheck.provider(RoomModule_ProvidesCompleteMealDaoFactory.create(roomModuleParam, providesRoomDatabaseProvider));
    this.completeMealRepositoryProvider = DoubleCheck.provider(RoomModule_CompleteMealRepositoryFactory.create(roomModuleParam, providesCompleteMealDaoProvider));
    this.providesImageServiceProvider = DoubleCheck.provider(ImageModule_ProvidesImageServiceFactory.create(imageModuleParam));
    this.providesCompletePlanDaoProvider = DoubleCheck.provider(RoomModule_ProvidesCompletePlanDaoFactory.create(roomModuleParam, providesRoomDatabaseProvider));
    this.CompletePlanRepositoryProvider = DoubleCheck.provider(RoomModule_CompletePlanRepositoryFactory.create(roomModuleParam, providesCompletePlanDaoProvider));
    this.providesCompleteMealIngredientDaoProvider = DoubleCheck.provider(RoomModule_ProvidesCompleteMealIngredientDaoFactory.create(roomModuleParam, providesRoomDatabaseProvider));
    this.MealIngredientJoinRepositoryProvider = DoubleCheck.provider(RoomModule_MealIngredientJoinRepositoryFactory.create(roomModuleParam, providesCompleteMealIngredientDaoProvider));
    this.providesApplicationProvider = DoubleCheck.provider(AppModule_ProvidesApplicationFactory.create(appModuleParam));
  }

  @Override
  public void inject(MainActivity mainActivity) {
    injectMainActivity(mainActivity);
  }

  @Override
  public void inject(SearchIngredientActivity searchIngredientActivity) {
    injectSearchIngredientActivity(searchIngredientActivity);
  }

  @Override
  public void inject(AddMealJourney addMealActivity) {
    injectAddMealJourney(addMealActivity);
  }

  @Override
  public void inject(AddPlanJourney addPlanActivity) {
  }

  @Override
  public void inject(MealDetail MealDetail) {
    injectMealDetail(MealDetail);
  }

  @Override
  public void inject(MealFragment mealFragment) {
    injectMealFragment(mealFragment);
  }

  @Override
  public void inject(PlanFragment planFragment) {
    injectPlanFragment(planFragment);
  }

  @Override
  public void inject(generateLunchFromPreferenceFragment generateMealPlanFragment) {
    injectgenerateLunchFromPreferenceFragment(generateMealPlanFragment);
  }

  @Override
  public void inject(AddIngredientJourney addIngredientActivity) {
  }

  @Override
  public void inject(PlanDetail shoppingListActivity) {
    injectPlanDetail(shoppingListActivity);
  }

  @Override
  public void inject(ServingSizeActivity servingSizeActivity) {
    injectServingSizeActivity(servingSizeActivity);
  }

  @Override
  public void inject(OnBoardingActivity onBoardingActivity) {
    injectOnBoardingActivity(onBoardingActivity);
  }

  @Override
  public void inject(StartActivity startActivity) {
    injectStartActivity(startActivity);
  }

  @Override
  public void inject(nameOfPlanFragment planNameFragment) {
    injectnameOfPlanFragment(planNameFragment);
  }

  @Override
  public void inject(dateOfPlanFragment planDateFragment) {
    injectdateOfPlanFragment(planDateFragment);
  }

  @Override
  public void inject(typeOfPlanFragment planTypeFragment) {
    injecttypeOfPlanFragment(planTypeFragment);
  }

  @Override
  public void inject(mealOfPlanFragment mealPickerFragment) {
    injectmealOfPlanFragment(mealPickerFragment);
  }

  @Override
  public void inject(reviewOfPlanFragment planReviewFragment) {
    injectreviewOfPlanFragment(planReviewFragment);
  }

  @Override
  public void inject(nameOfIngredientFragment nameOfPlanFragment) {
    injectnameOfIngredientFragment(nameOfPlanFragment);
  }

  @Override
  public void inject(descriptionOfIngredientFragment descriptionOfIngredientFragment) {
    injectdescriptionOfIngredientFragment(descriptionOfIngredientFragment);
  }

  @Override
  public void inject(amountOfIngredientFragment amountOfIngredientFragment) {
    injectamountOfIngredientFragment(amountOfIngredientFragment);
  }

  @Override
  public void inject(chipsOfIngredientFragment chipsOfIngredientFragment) {
    injectchipsOfIngredientFragment(chipsOfIngredientFragment);
  }

  @Override
  public void inject(energyOfIngredientFragment energyOfIngredientFragment) {
    injectenergyOfIngredientFragment(energyOfIngredientFragment);
  }

  @Override
  public void inject(fatOfIngredientFragment fatOfIngredientFragment) {
    injectfatOfIngredientFragment(fatOfIngredientFragment);
  }

  @Override
  public void inject(fiberOfIngredientFragment fiberOfIngredientFragment) {
    injectfiberOfIngredientFragment(fiberOfIngredientFragment);
  }

  @Override
  public void inject(proteinOfIngredientFragment proteinOfIngredientFragment) {
    injectproteinOfIngredientFragment(proteinOfIngredientFragment);
  }

  @Override
  public void inject(saturatesOfIngredientFragment saturatesOfIngredientFragment) {
    injectsaturatesOfIngredientFragment(saturatesOfIngredientFragment);
  }

  @Override
  public void inject(sugarOfIngredientFragment sugarOfIngredientFragment) {
    injectsugarOfIngredientFragment(sugarOfIngredientFragment);
  }

  @Override
  public void inject(caloriesOfIngredientFragment caloriesOfIngredientFragment) {
    injectcaloriesOfIngredientFragment(caloriesOfIngredientFragment);
  }

  @Override
  public void inject(brandOfIngredientFragment brandOfIngredientFragment) {
    injectbrandOfIngredientFragment(brandOfIngredientFragment);
  }

  @Override
  public void inject(overviewOfIngredientFragment overviewOfIngredientFragment) {
    injectoverviewOfIngredientFragment(overviewOfIngredientFragment);
  }

  @Override
  public void inject(generateDinnerFromPreferenceFragment generateDinnerFromPreferenceFragment) {
    injectgenerateDinnerFromPreferenceFragment(generateDinnerFromPreferenceFragment);
  }

  @Override
  public void inject(
      generateBreakfastFromPreferenceFragment generateBreakfastFromPreferenceFragment) {
    injectgenerateBreakfastFromPreferenceFragment(generateBreakfastFromPreferenceFragment);
  }

  @Override
  public void inject(mealNameFragment mealNameFragment) {
    injectmealNameFragment(mealNameFragment);
  }

  @Override
  public void inject(mealDescriptionFragment mealDescriptionFragment) {
    injectmealDescriptionFragment(mealDescriptionFragment);
  }

  @Override
  public void inject(mealIngredientFragment mealIngredientFragment) {
    injectmealIngredientFragment(mealIngredientFragment);
  }

  @Override
  public void inject(mealImageFragment mealImageFragment) {
    injectmealImageFragment(mealImageFragment);
  }

  @Override
  public void inject(mealTimeFragment mealTimeFragment) {
    injectmealTimeFragment(mealTimeFragment);
  }

  @Override
  public void inject(mealOverviewFragment mealOverviewFragment) {
    injectmealOverviewFragment(mealOverviewFragment);
  }

  @Override
  public CompleteMealRepository completeMealRepository() {
    return completeMealRepositoryProvider.get();
  }

  @Override
  public CompletePlanRepository completePlanRepository() {
    return CompletePlanRepositoryProvider.get();
  }

  @Override
  public FixedThreadPool fixedThreadPool() {
    return providesExecutorServiceProvider.get();
  }

  @Override
  public SharedPreferences sharedPreferences() {
    return providesSharedPreferenceServiceProvider.get();
  }

  @Override
  public ImageProcessing imageProcessing() {
    return providesImageServiceProvider.get();
  }

  @Override
  public Application application() {
    return providesApplicationProvider.get();
  }

  @Override
  public void inject(mealMethodFragment mealMethodFragment) {
    injectmealMethodFragment(mealMethodFragment);
  }

  private MainActivity injectMainActivity(MainActivity instance) {
    MainActivity_MembersInjector.injectFixedThreadPool(instance, providesExecutorServiceProvider.get());
    return instance;
  }

  private SearchIngredientActivity injectSearchIngredientActivity(
      SearchIngredientActivity instance) {
    SearchIngredientActivity_MembersInjector.injectIngredientRepository(instance, ingredientRepositoryProvider.get());
    return instance;
  }

  private AddMealJourney injectAddMealJourney(AddMealJourney instance) {
    AddMealJourney_MembersInjector.injectSharedPreferences(instance, providesSharedPreferenceServiceProvider.get());
    return instance;
  }

  private MealDetail injectMealDetail(MealDetail instance) {
    MealDetail_MembersInjector.injectCompleteMealRepository(instance, completeMealRepositoryProvider.get());
    MealDetail_MembersInjector.injectImageProcessing(instance, providesImageServiceProvider.get());
    MealDetail_MembersInjector.injectFixedThreadPool(instance, providesExecutorServiceProvider.get());
    return instance;
  }

  private MealFragment injectMealFragment(MealFragment instance) {
    MealFragment_MembersInjector.injectCompleteMealRepository(instance, completeMealRepositoryProvider.get());
    MealFragment_MembersInjector.injectFixedThreadPool(instance, providesExecutorServiceProvider.get());
    MealFragment_MembersInjector.injectSharedPreferences(instance, providesSharedPreferenceServiceProvider.get());
    MealFragment_MembersInjector.injectImageProcessing(instance, providesImageServiceProvider.get());
    return instance;
  }

  private PlanFragment injectPlanFragment(PlanFragment instance) {
    PlanFragment_MembersInjector.injectCompletePlanRepository(instance, CompletePlanRepositoryProvider.get());
    PlanFragment_MembersInjector.injectCompleteMealRepository(instance, completeMealRepositoryProvider.get());
    PlanFragment_MembersInjector.injectSharedPreferences(instance, providesSharedPreferenceServiceProvider.get());
    PlanFragment_MembersInjector.injectImageProcessing(instance, providesImageServiceProvider.get());
    PlanFragment_MembersInjector.injectFixedThreadPool(instance, providesExecutorServiceProvider.get());
    return instance;
  }

  private generateLunchFromPreferenceFragment injectgenerateLunchFromPreferenceFragment(
      generateLunchFromPreferenceFragment instance) {
    generateLunchFromPreferenceFragment_MembersInjector.injectCompleteMealRepository(instance, completeMealRepositoryProvider.get());
    generateLunchFromPreferenceFragment_MembersInjector.injectCompletePlanRepository(instance, CompletePlanRepositoryProvider.get());
    generateLunchFromPreferenceFragment_MembersInjector.injectFixedThreadPool(instance, providesExecutorServiceProvider.get());
    generateLunchFromPreferenceFragment_MembersInjector.injectSharedPreferences(instance, providesSharedPreferenceServiceProvider.get());
    generateLunchFromPreferenceFragment_MembersInjector.injectImageProcessing(instance, providesImageServiceProvider.get());
    return instance;
  }

  private PlanDetail injectPlanDetail(PlanDetail instance) {
    PlanDetail_MembersInjector.injectCompleteMealRepository(instance, completeMealRepositoryProvider.get());
    PlanDetail_MembersInjector.injectMealIngredientJoinRepository(instance, MealIngredientJoinRepositoryProvider.get());
    PlanDetail_MembersInjector.injectCompletePlanRepository(instance, CompletePlanRepositoryProvider.get());
    PlanDetail_MembersInjector.injectFixedThreadPool(instance, providesExecutorServiceProvider.get());
    return instance;
  }

  private ServingSizeActivity injectServingSizeActivity(ServingSizeActivity instance) {
    ServingSizeActivity_MembersInjector.injectIngredientRepository(instance, ingredientRepositoryProvider.get());
    ServingSizeActivity_MembersInjector.injectFixedThreadPool(instance, providesExecutorServiceProvider.get());
    ServingSizeActivity_MembersInjector.injectSharedPreferences(instance, providesSharedPreferenceServiceProvider.get());
    return instance;
  }

  private OnBoardingActivity injectOnBoardingActivity(OnBoardingActivity instance) {
    OnBoardingActivity_MembersInjector.injectSharedPreferences(instance, providesSharedPreferenceServiceProvider.get());
    OnBoardingActivity_MembersInjector.injectFixedThreadPool(instance, providesExecutorServiceProvider.get());
    return instance;
  }

  private StartActivity injectStartActivity(StartActivity instance) {
    StartActivity_MembersInjector.injectSharedPreferences(instance, providesSharedPreferenceServiceProvider.get());
    StartActivity_MembersInjector.injectFixedThreadPool(instance, providesExecutorServiceProvider.get());
    return instance;
  }

  private nameOfPlanFragment injectnameOfPlanFragment(nameOfPlanFragment instance) {
    nameOfPlanFragment_MembersInjector.injectSharedPreferences(instance, providesSharedPreferenceServiceProvider.get());
    nameOfPlanFragment_MembersInjector.injectFixedThreadPool(instance, providesExecutorServiceProvider.get());
    return instance;
  }

  private dateOfPlanFragment injectdateOfPlanFragment(dateOfPlanFragment instance) {
    dateOfPlanFragment_MembersInjector.injectSharedPreferences(instance, providesSharedPreferenceServiceProvider.get());
    dateOfPlanFragment_MembersInjector.injectFixedThreadPool(instance, providesExecutorServiceProvider.get());
    dateOfPlanFragment_MembersInjector.injectCompletePlanRepository(instance, CompletePlanRepositoryProvider.get());
    return instance;
  }

  private typeOfPlanFragment injecttypeOfPlanFragment(typeOfPlanFragment instance) {
    typeOfPlanFragment_MembersInjector.injectSharedPreferences(instance, providesSharedPreferenceServiceProvider.get());
    return instance;
  }

  private mealOfPlanFragment injectmealOfPlanFragment(mealOfPlanFragment instance) {
    mealOfPlanFragment_MembersInjector.injectSharedPreferences(instance, providesSharedPreferenceServiceProvider.get());
    mealOfPlanFragment_MembersInjector.injectFixedThreadPool(instance, providesExecutorServiceProvider.get());
    mealOfPlanFragment_MembersInjector.injectCompleteMealRepository(instance, completeMealRepositoryProvider.get());
    mealOfPlanFragment_MembersInjector.injectImageProcessing(instance, providesImageServiceProvider.get());
    return instance;
  }

  private reviewOfPlanFragment injectreviewOfPlanFragment(reviewOfPlanFragment instance) {
    reviewOfPlanFragment_MembersInjector.injectSharedPreferences(instance, providesSharedPreferenceServiceProvider.get());
    reviewOfPlanFragment_MembersInjector.injectFixedThreadPool(instance, providesExecutorServiceProvider.get());
    reviewOfPlanFragment_MembersInjector.injectCompleteMealRepository(instance, completeMealRepositoryProvider.get());
    reviewOfPlanFragment_MembersInjector.injectCompletePlanRepository(instance, CompletePlanRepositoryProvider.get());
    reviewOfPlanFragment_MembersInjector.injectImageProcessing(instance, providesImageServiceProvider.get());
    return instance;
  }

  private nameOfIngredientFragment injectnameOfIngredientFragment(
      nameOfIngredientFragment instance) {
    nameOfIngredientFragment_MembersInjector.injectSharedPreferences(instance, providesSharedPreferenceServiceProvider.get());
    nameOfIngredientFragment_MembersInjector.injectFixedThreadPool(instance, providesExecutorServiceProvider.get());
    return instance;
  }

  private descriptionOfIngredientFragment injectdescriptionOfIngredientFragment(
      descriptionOfIngredientFragment instance) {
    descriptionOfIngredientFragment_MembersInjector.injectSharedPreferences(instance, providesSharedPreferenceServiceProvider.get());
    descriptionOfIngredientFragment_MembersInjector.injectFixedThreadPool(instance, providesExecutorServiceProvider.get());
    return instance;
  }

  private amountOfIngredientFragment injectamountOfIngredientFragment(
      amountOfIngredientFragment instance) {
    amountOfIngredientFragment_MembersInjector.injectSharedPreferences(instance, providesSharedPreferenceServiceProvider.get());
    amountOfIngredientFragment_MembersInjector.injectFixedThreadPool(instance, providesExecutorServiceProvider.get());
    amountOfIngredientFragment_MembersInjector.injectIngredientRepository(instance, ingredientRepositoryProvider.get());
    return instance;
  }

  private chipsOfIngredientFragment injectchipsOfIngredientFragment(
      chipsOfIngredientFragment instance) {
    chipsOfIngredientFragment_MembersInjector.injectSharedPreferences(instance, providesSharedPreferenceServiceProvider.get());
    chipsOfIngredientFragment_MembersInjector.injectFixedThreadPool(instance, providesExecutorServiceProvider.get());
    return instance;
  }

  private energyOfIngredientFragment injectenergyOfIngredientFragment(
      energyOfIngredientFragment instance) {
    energyOfIngredientFragment_MembersInjector.injectSharedPreferences(instance, providesSharedPreferenceServiceProvider.get());
    energyOfIngredientFragment_MembersInjector.injectFixedThreadPool(instance, providesExecutorServiceProvider.get());
    return instance;
  }

  private fatOfIngredientFragment injectfatOfIngredientFragment(fatOfIngredientFragment instance) {
    fatOfIngredientFragment_MembersInjector.injectSharedPreferences(instance, providesSharedPreferenceServiceProvider.get());
    fatOfIngredientFragment_MembersInjector.injectFixedThreadPool(instance, providesExecutorServiceProvider.get());
    return instance;
  }

  private fiberOfIngredientFragment injectfiberOfIngredientFragment(
      fiberOfIngredientFragment instance) {
    fiberOfIngredientFragment_MembersInjector.injectSharedPreferences(instance, providesSharedPreferenceServiceProvider.get());
    fiberOfIngredientFragment_MembersInjector.injectFixedThreadPool(instance, providesExecutorServiceProvider.get());
    return instance;
  }

  private proteinOfIngredientFragment injectproteinOfIngredientFragment(
      proteinOfIngredientFragment instance) {
    proteinOfIngredientFragment_MembersInjector.injectSharedPreferences(instance, providesSharedPreferenceServiceProvider.get());
    proteinOfIngredientFragment_MembersInjector.injectFixedThreadPool(instance, providesExecutorServiceProvider.get());
    return instance;
  }

  private saturatesOfIngredientFragment injectsaturatesOfIngredientFragment(
      saturatesOfIngredientFragment instance) {
    saturatesOfIngredientFragment_MembersInjector.injectSharedPreferences(instance, providesSharedPreferenceServiceProvider.get());
    saturatesOfIngredientFragment_MembersInjector.injectFixedThreadPool(instance, providesExecutorServiceProvider.get());
    return instance;
  }

  private sugarOfIngredientFragment injectsugarOfIngredientFragment(
      sugarOfIngredientFragment instance) {
    sugarOfIngredientFragment_MembersInjector.injectSharedPreferences(instance, providesSharedPreferenceServiceProvider.get());
    sugarOfIngredientFragment_MembersInjector.injectFixedThreadPool(instance, providesExecutorServiceProvider.get());
    return instance;
  }

  private caloriesOfIngredientFragment injectcaloriesOfIngredientFragment(
      caloriesOfIngredientFragment instance) {
    caloriesOfIngredientFragment_MembersInjector.injectSharedPreferences(instance, providesSharedPreferenceServiceProvider.get());
    caloriesOfIngredientFragment_MembersInjector.injectFixedThreadPool(instance, providesExecutorServiceProvider.get());
    caloriesOfIngredientFragment_MembersInjector.injectIngredientRepository(instance, ingredientRepositoryProvider.get());
    return instance;
  }

  private brandOfIngredientFragment injectbrandOfIngredientFragment(
      brandOfIngredientFragment instance) {
    brandOfIngredientFragment_MembersInjector.injectSharedPreferences(instance, providesSharedPreferenceServiceProvider.get());
    brandOfIngredientFragment_MembersInjector.injectFixedThreadPool(instance, providesExecutorServiceProvider.get());
    return instance;
  }

  private overviewOfIngredientFragment injectoverviewOfIngredientFragment(
      overviewOfIngredientFragment instance) {
    overviewOfIngredientFragment_MembersInjector.injectSharedPreferences(instance, providesSharedPreferenceServiceProvider.get());
    overviewOfIngredientFragment_MembersInjector.injectFixedThreadPool(instance, providesExecutorServiceProvider.get());
    overviewOfIngredientFragment_MembersInjector.injectIngredientRepository(instance, ingredientRepositoryProvider.get());
    return instance;
  }

  private generateDinnerFromPreferenceFragment injectgenerateDinnerFromPreferenceFragment(
      generateDinnerFromPreferenceFragment instance) {
    generateDinnerFromPreferenceFragment_MembersInjector.injectCompleteMealRepository(instance, completeMealRepositoryProvider.get());
    generateDinnerFromPreferenceFragment_MembersInjector.injectCompletePlanRepository(instance, CompletePlanRepositoryProvider.get());
    generateDinnerFromPreferenceFragment_MembersInjector.injectFixedThreadPool(instance, providesExecutorServiceProvider.get());
    generateDinnerFromPreferenceFragment_MembersInjector.injectSharedPreferences(instance, providesSharedPreferenceServiceProvider.get());
    generateDinnerFromPreferenceFragment_MembersInjector.injectImageProcessing(instance, providesImageServiceProvider.get());
    return instance;
  }

  private generateBreakfastFromPreferenceFragment injectgenerateBreakfastFromPreferenceFragment(
      generateBreakfastFromPreferenceFragment instance) {
    generateBreakfastFromPreferenceFragment_MembersInjector.injectCompleteMealRepository(instance, completeMealRepositoryProvider.get());
    generateBreakfastFromPreferenceFragment_MembersInjector.injectCompletePlanRepository(instance, CompletePlanRepositoryProvider.get());
    generateBreakfastFromPreferenceFragment_MembersInjector.injectFixedThreadPool(instance, providesExecutorServiceProvider.get());
    generateBreakfastFromPreferenceFragment_MembersInjector.injectSharedPreferences(instance, providesSharedPreferenceServiceProvider.get());
    generateBreakfastFromPreferenceFragment_MembersInjector.injectImageProcessing(instance, providesImageServiceProvider.get());
    return instance;
  }

  private mealNameFragment injectmealNameFragment(mealNameFragment instance) {
    mealNameFragment_MembersInjector.injectSharedPreferences(instance, providesSharedPreferenceServiceProvider.get());
    return instance;
  }

  private mealDescriptionFragment injectmealDescriptionFragment(mealDescriptionFragment instance) {
    mealDescriptionFragment_MembersInjector.injectSharedPreferences(instance, providesSharedPreferenceServiceProvider.get());
    return instance;
  }

  private mealIngredientFragment injectmealIngredientFragment(mealIngredientFragment instance) {
    mealIngredientFragment_MembersInjector.injectSharedPreferences(instance, providesSharedPreferenceServiceProvider.get());
    mealIngredientFragment_MembersInjector.injectIngredientRepository(instance, ingredientRepositoryProvider.get());
    return instance;
  }

  private mealImageFragment injectmealImageFragment(mealImageFragment instance) {
    mealImageFragment_MembersInjector.injectSharedPreferences(instance, providesSharedPreferenceServiceProvider.get());
    mealImageFragment_MembersInjector.injectImageProcessing(instance, providesImageServiceProvider.get());
    return instance;
  }

  private mealTimeFragment injectmealTimeFragment(mealTimeFragment instance) {
    mealTimeFragment_MembersInjector.injectSharedPreferences(instance, providesSharedPreferenceServiceProvider.get());
    return instance;
  }

  private mealOverviewFragment injectmealOverviewFragment(mealOverviewFragment instance) {
    mealOverviewFragment_MembersInjector.injectSharedPreferences(instance, providesSharedPreferenceServiceProvider.get());
    mealOverviewFragment_MembersInjector.injectFixedThreadPool(instance, providesExecutorServiceProvider.get());
    mealOverviewFragment_MembersInjector.injectCompleteMealRepository(instance, completeMealRepositoryProvider.get());
    return instance;
  }

  private mealMethodFragment injectmealMethodFragment(mealMethodFragment instance) {
    mealMethodFragment_MembersInjector.injectSharedPreferences(instance, providesSharedPreferenceServiceProvider.get());
    return instance;
  }

  public static final class Builder {
    private AppModule appModule;

    private RoomModule roomModule;

    private FixedThreadModule fixedThreadModule;

    private SharedPreferencesModule sharedPreferencesModule;

    private ImageModule imageModule;

    private Builder() {
    }

    public Builder appModule(AppModule appModule) {
      this.appModule = Preconditions.checkNotNull(appModule);
      return this;
    }

    public Builder roomModule(RoomModule roomModule) {
      this.roomModule = Preconditions.checkNotNull(roomModule);
      return this;
    }

    public Builder fixedThreadModule(FixedThreadModule fixedThreadModule) {
      this.fixedThreadModule = Preconditions.checkNotNull(fixedThreadModule);
      return this;
    }

    public Builder sharedPreferencesModule(SharedPreferencesModule sharedPreferencesModule) {
      this.sharedPreferencesModule = Preconditions.checkNotNull(sharedPreferencesModule);
      return this;
    }

    public Builder imageModule(ImageModule imageModule) {
      this.imageModule = Preconditions.checkNotNull(imageModule);
      return this;
    }

    public AppComponent build() {
      Preconditions.checkBuilderRequirement(appModule, AppModule.class);
      Preconditions.checkBuilderRequirement(roomModule, RoomModule.class);
      if (fixedThreadModule == null) {
        this.fixedThreadModule = new FixedThreadModule();
      }
      Preconditions.checkBuilderRequirement(sharedPreferencesModule, SharedPreferencesModule.class);
      Preconditions.checkBuilderRequirement(imageModule, ImageModule.class);
      return new DaggerAppComponent(appModule, roomModule, fixedThreadModule, sharedPreferencesModule, imageModule);
    }
  }
}
