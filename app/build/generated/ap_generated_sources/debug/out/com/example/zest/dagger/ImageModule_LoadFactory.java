// Generated by Dagger (https://dagger.dev).
package com.example.zest.dagger;

import android.graphics.Bitmap;
import com.example.zest.services.ImageProcessing;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class ImageModule_LoadFactory implements Factory<Bitmap> {
  private final ImageModule module;

  private final Provider<String> pathProvider;

  private final Provider<ImageProcessing.BitmapSize> bitmapSizeProvider;

  public ImageModule_LoadFactory(ImageModule module, Provider<String> pathProvider,
      Provider<ImageProcessing.BitmapSize> bitmapSizeProvider) {
    this.module = module;
    this.pathProvider = pathProvider;
    this.bitmapSizeProvider = bitmapSizeProvider;
  }

  @Override
  public Bitmap get() {
    return Load(module, pathProvider.get(), bitmapSizeProvider.get());
  }

  public static ImageModule_LoadFactory create(ImageModule module, Provider<String> pathProvider,
      Provider<ImageProcessing.BitmapSize> bitmapSizeProvider) {
    return new ImageModule_LoadFactory(module, pathProvider, bitmapSizeProvider);
  }

  public static Bitmap Load(ImageModule instance, String path,
      ImageProcessing.BitmapSize bitmapSize) {
    return Preconditions.checkNotNullFromProvides(instance.Load(path, bitmapSize));
  }
}
