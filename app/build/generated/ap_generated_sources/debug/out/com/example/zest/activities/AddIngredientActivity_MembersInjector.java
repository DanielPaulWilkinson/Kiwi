// Generated by Dagger (https://dagger.dev).
package com.example.zest.activities;

import com.example.zest.async.FixedThreadPool;
import com.example.zest.room.repositories.IngredientRepository;
import dagger.MembersInjector;
import dagger.internal.InjectedFieldSignature;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class AddIngredientActivity_MembersInjector implements MembersInjector<AddIngredientActivity> {
  private final Provider<IngredientRepository> ingredientRepositoryProvider;

  private final Provider<FixedThreadPool> fixedThreadPoolProvider;

  public AddIngredientActivity_MembersInjector(
      Provider<IngredientRepository> ingredientRepositoryProvider,
      Provider<FixedThreadPool> fixedThreadPoolProvider) {
    this.ingredientRepositoryProvider = ingredientRepositoryProvider;
    this.fixedThreadPoolProvider = fixedThreadPoolProvider;
  }

  public static MembersInjector<AddIngredientActivity> create(
      Provider<IngredientRepository> ingredientRepositoryProvider,
      Provider<FixedThreadPool> fixedThreadPoolProvider) {
    return new AddIngredientActivity_MembersInjector(ingredientRepositoryProvider, fixedThreadPoolProvider);
  }

  @Override
  public void injectMembers(AddIngredientActivity instance) {
    injectIngredientRepository(instance, ingredientRepositoryProvider.get());
    injectFixedThreadPool(instance, fixedThreadPoolProvider.get());
  }

  @InjectedFieldSignature("com.example.zest.activities.AddIngredientActivity.ingredientRepository")
  public static void injectIngredientRepository(AddIngredientActivity instance,
      IngredientRepository ingredientRepository) {
    instance.ingredientRepository = ingredientRepository;
  }

  @InjectedFieldSignature("com.example.zest.activities.AddIngredientActivity.fixedThreadPool")
  public static void injectFixedThreadPool(AddIngredientActivity instance,
      FixedThreadPool fixedThreadPool) {
    instance.fixedThreadPool = fixedThreadPool;
  }
}
